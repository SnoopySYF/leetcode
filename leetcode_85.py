class Solution(object):
    def maximalRectangle(self, matrix):
        """
        :type matrix: List[List[str]]
        :rtype: int
        """
        if(matrix == [] or matrix[0] == []):
            return 0
        m = len(matrix[0])
        n = len(matrix)
        height = [[0 for i in range(m)] for j in range(n)]
        Area = [[0 for i in range(m)] for j in range(n)]
        maxArea = 0
        for i in range(n):
            for j in range(m):
                if(matrix[i][j] == "0"):
                    height[i][j] = 0
                else:
                    height[i][j] = height[i-1][j] + 1 if i > 0 else 1
            for j in range(m):
                if(matrix[i][j] == "1"):
                    h = height[i][j]
                    width = 1
                    k = j + 1
                    while(k < m):
                        if(h > height[i][k]):
                            break
                        else:
                            width += 1
                            k += 1
                    k = j - 1
                    while(k >= 0):
                        if(h > height[i][k]):
                            break
                        else:
                            width += 1
                            k -= 1
                    Area[i][j] = h*width                       
                    maxArea = max(maxArea, Area[i][j])
        return maxArea

s = Solution()
print(s.maximalRectangle([
    ["0","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0"],
    ["1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
    ["1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
    ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1"],
    ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1"],
    ["1","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1"],
    ["1","0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1"],
    ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0"],
    ["0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1"],
    ["1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1"],
    ["1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
    ["0","1","1","0","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
    ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1"],
    ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
    ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
    ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","0","1"],
    ["1","1","1","1","1","1","1","1","0","1","1","0","1","1","0","1","1","1","1"],
    ["1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","0","1","1","1"]])) 